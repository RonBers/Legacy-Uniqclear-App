/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package contractsPackage;

import connectionSql.mysqlConnection;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import java.util.Arrays;
import javax.swing.JOptionPane;
/**
 *
 * @author User
 */
public class rentIn extends javax.swing.JDialog {
Connection con = new mysqlConnection().getCon();
public ArrayList<String> returnedItems = new ArrayList<>();
    /**
     * Creates new form rentIn
     */
    public rentIn(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        getContentPane().setBackground(Color.white);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        header1 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        addPromoTitle1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        rentCustomerName = new javax.swing.JLabel();
        addPromoTitle2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        rentedItemsTable = new javax.swing.JTable();
        addPromoTitle3 = new javax.swing.JLabel();
        rentCustomerID = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        selectedItems = new javax.swing.JTable();
        addPromoTitle = new javax.swing.JLabel();
        selectItem = new javax.swing.JButton();
        confirmRentIn = new javax.swing.JButton();
        undo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setPreferredSize(new java.awt.Dimension(310, 100));

        header1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/uniqclearLogo(header).png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(header1)
                .addGap(0, 330, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(header1)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        jButton5.setBackground(new java.awt.Color(40, 75, 135));
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Home");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        addPromoTitle1.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        addPromoTitle1.setText("Return items for:");

        rentCustomerName.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        rentCustomerName.setText("name");

        addPromoTitle2.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        addPromoTitle2.setText("Rented items:");

        rentedItemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Item", "Availability", "Life Span"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        rentedItemsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rentedItemsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(rentedItemsTable);

        addPromoTitle3.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        addPromoTitle3.setText("ID:");

        rentCustomerID.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        rentCustomerID.setText("id");

        selectedItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Item", "Availability", "Life Span"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        selectedItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectedItemsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(selectedItems);

        addPromoTitle.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        addPromoTitle.setText("Selected Items:");

        selectItem.setBackground(new java.awt.Color(40, 75, 135));
        selectItem.setForeground(new java.awt.Color(255, 255, 255));
        selectItem.setText("Select item");
        selectItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectItemActionPerformed(evt);
            }
        });

        confirmRentIn.setBackground(new java.awt.Color(40, 75, 135));
        confirmRentIn.setForeground(new java.awt.Color(255, 255, 255));
        confirmRentIn.setText("Confirm");
        confirmRentIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmRentInActionPerformed(evt);
            }
        });

        undo.setBackground(new java.awt.Color(40, 75, 135));
        undo.setForeground(new java.awt.Color(255, 255, 255));
        undo.setText("Undo");
        undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 865, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton5)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 778, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(undo, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(selectItem, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(addPromoTitle2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(addPromoTitle1)
                                    .addGap(18, 18, 18)
                                    .addComponent(rentCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(addPromoTitle3)
                                    .addGap(18, 18, 18)
                                    .addComponent(rentCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(addPromoTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(553, 553, 553))
                                .addComponent(confirmRentIn, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 778, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addPromoTitle3, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                        .addComponent(rentCustomerID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addPromoTitle1, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                        .addComponent(rentCustomerName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addPromoTitle2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectItem)
                    .addComponent(undo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addPromoTitle)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(confirmRentIn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void generateTable(){
        DefaultTableModel rentedItems = (DefaultTableModel)rentedItemsTable.getModel();
        int contractID = Integer.parseInt(rentCustomerID.getText());
        
        String sql = "SELECT RI.rental_item_id, RI.rental_item_name " +
             "FROM rental_item AS RI " +
             "JOIN rented_out AS RO ON RI.rental_item_id = RO.rental_item_id " +
             "JOIN rental_contract AS RC ON RO.rental_contract_id = RC.rental_contract_id " +
             "LEFT JOIN rented_in AS RI2 ON RO.rented_out_id = RI2.rented_out_id " +
             "WHERE RO.rental_contract_id = " + contractID + " " +
             "AND RI2.rented_in_id IS NULL";  
        
        try {
        PreparedStatement pst = con.prepareStatement(sql);
        ResultSet rs = pst.executeQuery();
        while (rs.next()) {
            String itemID = rs.getString("RI.rental_item_id");
            String itemName = rs.getString("RI.rental_item_name");
            /*
            String dateCreated="";
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            LocalDateTime today = LocalDateTime.now();
            LocalDateTime createdAt = LocalDateTime.parse(dateCreated, dtf);
            long daysBetween = Duration.between(today,createdAt).toDays();
            */

            //String tempDays = Math.abs(daysBetween) + " days";

            if(checkAvailability(itemID).equalsIgnoreCase("Rented out")){
                rentedItems.addRow(new Object[]{itemID,itemName,checkAvailability(itemID),1});
            }  
        }
        }catch(Exception e){
            System.out.println(e.getMessage());
        } 
    }
    private String checkAvailability(String id){
        String availability ="";
        
        String getRentedOut = "SELECT * FROM rented_out WHERE rental_item_id = "+id+" ORDER BY out_datetime DESC LIMIT 1;";
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        LocalDateTime today = LocalDateTime.now();
                String dateTime = "";
                String rentedOutId = "";
                String returnTime = "";
                
                try{
                    PreparedStatement pst2 = con.prepareStatement(getRentedOut);
                    ResultSet rs2 = pst2.executeQuery();
                    
                    if(!rs2.next()){
                         availability = "Available";
                    }else{
                        dateTime = rs2.getString("out_datetime");
                        rentedOutId = rs2.getString("rented_out_id");
                      
                        String getRentedIn = "SELECT rented_in_id,in_datetime FROM rented_in WHERE rented_out_id = "+rentedOutId+" ORDER BY in_datetime DESC LIMIT 1;";

                            try{
                                PreparedStatement pst3 = con.prepareStatement(getRentedIn);
                                ResultSet rs3 = pst3.executeQuery();

                                if (!rs3.next()){
                                    availability = "Rented out";
                                }else{
                                    returnTime = rs3.getString("in_datetime");

                                    LocalDateTime latestReturn = LocalDateTime.parse(returnTime,dtf);
                                    LocalDateTime latestRent = LocalDateTime.parse(dateTime, dtf);

                                    int knowLatest = latestReturn.compareTo(latestRent);

                                    if (knowLatest > 0){
                                        availability = "Available";
                                    }else{
                                        availability = "Rented out";
                                    }
                                }
                            }catch(Exception ex){
                                System.out.println("Error: " + ex.getMessage());
                            }
                        
 
                    }
                    

                }catch(Exception ex){
                    System.out.println("Error:"+ ex.getMessage());
                }

        //System.out.println(availability);
        return availability;
    }
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void rentedItemsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rentedItemsTableMouseClicked
        // TODO add your handling code here:
        /*
        if (itemsTable.getSelectedRow() > -1){
            rentOutButton.setEnabled(true);
            returnItemButton.setEnabled(true);
        }else{
            rentOutButton.setEnabled(false);
            returnItemButton.setEnabled(false);
        }
        */

    }//GEN-LAST:event_rentedItemsTableMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        generateTable();
    }//GEN-LAST:event_formWindowOpened

    private void selectedItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectedItemsMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_selectedItemsMouseClicked

    private void selectItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectItemActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        DefaultTableModel Selected = (DefaultTableModel) rentedItemsTable.getModel();
        DefaultTableModel itemsSelected = (DefaultTableModel) selectedItems.getModel();
        //itemsSelected.setRowCount(0);
        
        int index = rentedItemsTable.getSelectedRow(); // Get the selected row (via ID) in Jtable  
        
        if(index == -1){
        JOptionPane.showMessageDialog(this, "Please select an item!", "Error", JOptionPane.INFORMATION_MESSAGE);
        }else{
        String id = Selected.getValueAt(index, 0).toString(); // Set string into a value from row, concatenated already (from other function)
        String item = Selected.getValueAt(index, 1).toString();
        String availability = (Selected.getValueAt(index, 2).toString());
        String lifespan = (Selected.getValueAt(index, 3).toString());
        System.out.println(id);
        
        itemsSelected.addRow(new Object[]{id, item, availability, lifespan}); // Array to add as a row in the table
        
        Selected.removeRow(index);
        }

    }//GEN-LAST:event_selectItemActionPerformed

    private void confirmRentInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmRentInActionPerformed
        // TODO add your handling code here:
        int contractID = Integer.parseInt(rentCustomerID.getText());
        addContract contractFrame = new addContract(new javax.swing.JFrame(), true);
        DefaultTableModel itemsSelected = (DefaultTableModel) selectedItems.getModel();
        int rowCount = itemsSelected.getRowCount();
        for (int i = 0; i < rowCount; i++) {
        String id = itemsSelected.getValueAt(i, 0).toString();
        String item = itemsSelected.getValueAt(i, 1).toString();
        String availability = itemsSelected.getValueAt(i, 2).toString();
        String lifespan = itemsSelected.getValueAt(i, 3).toString();
        System.out.println("ID: " + id + ", Item: " + item + ", Availability: " + availability + ", Lifespan: " + lifespan);
        returnedItems.add(id);
        }
        try{
        for(String itemsID:returnedItems){
            String sqlRentIn="INSERT INTO rented_in (rented_out_id, in_datetime) "
                           + "SELECT ro.rented_out_id, NOW() FROM rented_out as RO "
                           + "WHERE ro.rental_item_id="+Integer.parseInt(itemsID)+"";
            PreparedStatement pstUpdate = con.prepareStatement(sqlRentIn);
            pstUpdate.executeUpdate();
        }
        JOptionPane.showMessageDialog(this, "Items returned!", "Success", JOptionPane.INFORMATION_MESSAGE);
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_confirmRentInActionPerformed

    private void undoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoActionPerformed
        // TODO add your handling code here:
        DefaultTableModel Selected = (DefaultTableModel) rentedItemsTable.getModel();
        DefaultTableModel itemsSelected = (DefaultTableModel) selectedItems.getModel();
        //itemsSelected.setRowCount(0);
        
        int index = selectedItems.getSelectedRow(); // Get the selected row (via ID) in Jtable  
        
        if(index == -1){
        JOptionPane.showMessageDialog(this, "Please select an item!", "Error", JOptionPane.INFORMATION_MESSAGE);
        }else{
        String id = itemsSelected.getValueAt(index, 0).toString(); // Set string into a value from row, concatenated already (from other function)
        String item = itemsSelected.getValueAt(index, 1).toString();
        String availability = (itemsSelected.getValueAt(index, 2).toString());
        String lifespan = (itemsSelected.getValueAt(index, 3).toString());
        System.out.println(id);
        
        Selected.addRow(new Object[]{id, item, availability, lifespan}); // Array to add as a row in the table
        
        itemsSelected.removeRow(index);
    } 
    }//GEN-LAST:event_undoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(rentIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(rentIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(rentIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(rentIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                rentIn dialog = new rentIn(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addPromoTitle;
    private javax.swing.JLabel addPromoTitle1;
    private javax.swing.JLabel addPromoTitle2;
    private javax.swing.JLabel addPromoTitle3;
    private javax.swing.JButton confirmRentIn;
    private javax.swing.JLabel header1;
    private javax.swing.JButton jButton5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator2;
    public javax.swing.JLabel rentCustomerID;
    public javax.swing.JLabel rentCustomerName;
    private javax.swing.JTable rentedItemsTable;
    private javax.swing.JButton selectItem;
    private javax.swing.JTable selectedItems;
    private javax.swing.JButton undo;
    // End of variables declaration//GEN-END:variables
}
